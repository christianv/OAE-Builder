namespace :bld do
  desc "Clone the repositories needed to build everything"
  task :clone do
    cmds = []
    if @ui.has_key? "path"
      if File.directory? @ui["path"]
        @logger.info "#{@ui["path"]} already exists."
      elsif @ui.has_key? "repository"
        @logger.info "Cloning #{@ui["repository"]} to #{@ui["path"]}"
        Git.clone(@ui["repository"], @ui["path"])
        if @ui.has_key? "remote" and @ui["remote"] != "origin"
          cmds << "(cd #{@ui["path"]} && git remote rename origin #{@ui["remote"]})"
        end
      end
    end

    @server.each do |p|
      if p.has_key? "path"
        if File.directory? p["path"]
          @logger.info "#{p["path"]} already exists."
        elsif p.has_key? "repository"
          @logger.info "Cloning #{p["repository"]} to #{p["path"]}"
          Git.clone(p["repository"], p["path"])
          if p.has_key? "remote" and p["remote"] != "origin"
            cmds << "(cd #{p["path"]} && git remote rename origin #{p["remote"]})"
          end
        end
      end
    end

    if !cmds.empty?
      @logger.info "\nPlease issue the following commands:"
      cmds.each do |cmd|
        @logger.info cmd
      end
      @logger.info ""
    end
  end

  desc "Clean files and directories from a previous server start"
  task :clean => ['ctl:kill', 'bld:clean:mysql'] do
    touch CLEAN_FILES
    rm_r CLEAN_FILES
  end

  desc "Update (git pull) all Nakamura and UI projects (alias: up)"
  task :update do
    if @update_ui then
      g = Git.open(@ui["path"])
      remote = @ui["remote"] || "origin"
      branch = remote + "/" + (@ui["branch"] || "master")
      localbranch = @ui["localbranch"] || "master"
      @logger.info "Checkout out #{localbranch}"
      g.checkout(g.branch(localbranch))
      @logger.info "Updating #{@ui["path"]}:#{branch}"
      @logger.info g.pull(remote, branch)
    end

    @server.each do |p|
      g = Git.open(p["path"])
      remote = p["remote"] || "origin"
      branch = remote + "/" + (p["branch"] || "master")
      localbranch = p["localbranch"] || "master"
      @logger.info "Checkout out #{localbranch}"
      g.checkout(g.branch(localbranch))
      @logger.info "Updating #{p["path"]}:#{branch}"
      @logger.info g.pull(remote, branch)
    end
  end

  task :up => 'bld:update'

  desc "Rebuild the UI and Nakamura projects"
  task :rebuild => ['conf:config'] do
    Dir.chdir @ui["path"] do
      system("#{@mvn_cmd} clean install")
    end
    @server.each do |p|
      Dir.chdir p["path"] do
        system("#{@mvn_cmd} clean install")
      end
    end
  end

  desc "Rebuild just the app bundle to include any changed bundles without building everything"
  task :fastrebuild => ['conf:config'] do
    Dir.chdir "#{@builddir}/nakamura/app" do
      system("#{@mvn_cmd} clean install")
    end
  end

  desc "Create a release build of the UI, regular build of everything else, and run it"
  task :release => ['ctl:clean', 'bld:update', 'bld:release:build', 'ctl:run'] do
  end

  desc "Update and rebuild the UI and Nakamura projects"
  task :build => ['bld:update', 'bld:rebuild']

  namespace :clean do
    desc "Clean the mysql db"
    task :mysql do
      if @db["driver"] == "mysql"
        my = Mysql::new("localhost", @db["user"], @db["password"])
        my.query("drop database if exists #{@db["db"]}")
        my.query("create database #{@db["db"]} default character set 'utf8'")
      end
    end

    desc "Clean the build artifacts generated by the UI build"
    task :ui do
      Dir.chdir @ui["path"] do
        system("#{@mvn_cmd} clean")
      end
    end
  end

  namespace :release do
    desc "Rebuild the UI and Nakamura projects, using a release build for the UI"
    task :build do
      Dir.chdir @ui["path"] do
        system("#{@mvn_cmd} clean install -P sakai-release")
      end
      @server.each do |p|
        Dir.chdir p["path"] do
          system("#{@mvn_cmd} clean install")
        end
      end
    end
  end
end
